using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Model.DomainModel;
using TheEnterprise.Design;

namespace TheEnterprise.Pages
{
    /// <summary>
    /// Interaction logic for Main.xaml
    /// </summary>
    public partial class Main : UserControl
    {
        private MainWindow mainWindow;
        private List<GridPresent> grids = new List<GridPresent>();
        private Grid mainGrid = new Grid();
        private int count = 0;

        public Main(MainWindow mainWindow)
        {
            InitializeComponent();
            GridTemplate();
            Content.Children.Add(mainGrid);
            this.mainWindow = mainWindow;
            resetValues();

            foreach (QuestionGroup questionGroup in mainWindow.ModelFacade.Filter.QuestionGroups)
            {
                addRow();
                Label l = new Label()
                {
                    FontSize = 25,
                    Content = questionGroup.Title
                };
                Grid.SetRow(l, count++);
                Grid.SetColumn(l, 0);
                mainGrid.Children.Add(l);

                GridPresent gp = new GridPresent(questionGroup);
                grids.Add(gp);
                foreach (Question q in questionGroup.Questions)
                {
                    if (q.IsActive(mainWindow.ModelFacade.Filter))
                    {
                        RowEntity row = gp.addRow(q.Rank, q);
                        row.SelectionChanged += AnswerSelectionChanged;
                    }

                }

                addRow();
                Grid g = gp.LoadGrid();
                Grid.SetRow(g, count++);
                Grid.SetColumn(g, 0);
                mainGrid.Children.Add(g);

            }
   

        }
        private void AnswerSelectionChanged(RowEntity row)
        {

            var selectedAnswer = row.AnswerComboBox.SelectedItem as Answer;
            row.QuestionObject.Value = selectedAnswer;
            // Aktivere jeg nogle nye?
            foreach (GridPresent gp in grids)
            {
                foreach (Question q in gp.QuestionGroup.Questions)
                {
                    if (q.IsActive(mainWindow.ModelFacade.Filter) && !gp.IsCopy(q))
                    {
                        RowEntity newRow = gp.addRow(q.Rank, q);
                        newRow.SelectionChanged += AnswerSelectionChanged;
                    }
                }
                gp.Refresh(mainWindow.ModelFacade.Filter);
            }
        }
        private void resetValues()
        {
            foreach (QuestionGroup qg in mainWindow.ModelFacade.Filter.QuestionGroups)
            {
                foreach (Question question in qg.Questions)
                {
                    question.Value = null;
                }
            }
        }

        private void GridTemplate()
        {
            mainGrid = new Grid();
     
            // Create Columns
            ColumnDefinition gridCol1 = new ColumnDefinition();
            gridCol1.Width = new GridLength(1.0, GridUnitType.Star);
            mainGrid.ColumnDefinitions.Add(gridCol1);

           
        }
        private void addRow()
        {
            RowDefinition gridRow1 = new RowDefinition();
            gridRow1.Height = GridLength.Auto;
            mainGrid.RowDefinitions.Add(gridRow1);
        }

    } 

}
